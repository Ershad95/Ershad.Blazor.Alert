@using Ershad.Blazor.Alert.Model

<div class="@classNames" style=@styles @onclick="Close">
    <div class="card-header">@headerMessage</div>
    <div class="card-body">
        @{
            if (ChildContent != null)
            {
                @ChildContent;
            }
            else
            {
                <h5 class="card-title">@message</h5>
                <p class="card-text">@footerMessage</p>
            }
        }
    </div>
</div>
@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    private void Close() => classNames += " visually-hidden ";
    public string styles{ get; set; }
    [Parameter]
    public string headerMessage { get; set; }
    [Parameter]
    public string message { get; set; }
    [Parameter]
    public string footerMessage { get; set; }
    [Parameter]
    public TypeAlert typeAlert { get; set; }
    [Parameter]
    public AnimationType AnimationType { get; set; }
    [Parameter]
    public DirectionType direction { get; set; } = DirectionType.LTR;
    private string classNames = "card text-white animate__animated";
    protected override Task OnInitializedAsync()
    {
        styles = "width:100%;";
        switch (direction)
        {
            case DirectionType.RTL:
                styles += " direction:rtl";
                break;
            case DirectionType.LTR:
                styles += " direction:ltr";
                break;
        }
        switch (typeAlert)
        {
            case TypeAlert.Danger:
                classNames += " bg-danger";
                break;
            case TypeAlert.Success:
                classNames += " bg-success";
                break;
            case TypeAlert.Info:
                classNames += " bg-info";
                break;
            case TypeAlert.Warning:
                classNames += " bg-warning";
                break;
        }
        switch (AnimationType)
        {
            case AnimationType.Bounce:
                classNames += " animate__bounce";
                break;
            case AnimationType.Flash:
                classNames += " animate__flash";
                break;
            case AnimationType.HeartBeat:
                classNames += " animate__heartBeat";
                break;
            case AnimationType.Pulse:
                classNames += " animate__pulse";
                break;
        }
        return base.OnInitializedAsync();
    }
}
